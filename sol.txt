truffle console --network development
make your ganache run
const instance = await bank_account.deployed();
await instance.create_account({ from: accounts[0] });
await instance.deposit({ from: accounts[0], value: web3.utils.toWei('1', 'ether') });
await instance.withdraw(web3.utils.toWei('0.5', 'ether'), { from: accounts[0] });
const balance = await instance.show_balance(accounts[0]);
console.log(web3.utils.fromWei(balance, 'ether'));

const accounts = await web3.eth.getAccounts();
console.log(accounts); // Check available accounts

const deployedContract = await bank_account.deployed();
console.log(deployedContract.address); // Check the contract address

mkdir election-project
cd election-project
truffle init

4. Write Migration Script:

const Election = artifacts.require("Election");

module.exports = function (deployer) {
  deployer.deploy(Election);
};



const election = await Election.deployed();

const candidate1 = await election.candidates(1);
const candidate2 = await election.candidates(2);
console.log(candidate1.name); // Output: Candidate 1
console.log(candidate2.name); // Output: Candidate 2
await election.vote(1, { from: web3.eth.accounts[0] });
const hasVoted = await election.voters(web3.eth.accounts[0]);
console.log(hasVoted); // Output: true or false
election.votedEvent({}, { fromBlock: 0, toBlock: 'latest' }).watch((error, event) => {
  if (!error) {
    console.log('Voted for candidate ID:', event.args.candidateId.toString());
  }
});





//-------------------------bank account----------------------------------------------

In the migrations folder, create a new migration file, e.g., 2_deploy_contracts.js:

javascript
Copy code
const BankAccount = artifacts.require("bank_account");

module.exports = function (deployer) {
  deployer.deploy(BankAccount);
};

Get the contract instance:

javascript
Copy code
const instance = await BankAccount.deployed();
Create an account:

javascript
Copy code
await instance.create_account({ from: web3.eth.accounts[0] });
This will create an account for the first address in Ganache.

Deposit Ether:

You can deposit Ether into the account like this (replace the amount with a value you want to send):

javascript
Copy code
await instance.deposit({ from: web3.eth.accounts[0], value: web3.utils.toWei("1", "ether") });
Withdraw Ether:

You can withdraw Ether like this (replace amount with the desired withdrawal amount):

javascript
Copy code
await instance.withdraw(web3.utils.toWei("0.5", "ether"), { from: web3.eth.accounts[0] });
Check balance:

To check the balance of the account:

javascript
Copy code
const balance = await instance.show_balance(web3.eth.accounts[0]);
console.log(balance.toString());

//-----------------------------from start to end----------------------------------------------

1. Set Up Truffle Project:
Make sure you have a Truffle project set up. If not, follow these steps:

bash
Copy code
mkdir student-management
cd student-management
truffle init
2. Create the Student Management Contract:
Save your Student_management contract code in the contracts/ folder. Name the file Student_management.sol.

3. Configure truffle-config.js:
Ensure you have the correct configuration for connecting to the Ganache network in your truffle-config.js.

js
Copy code
module.exports = {
  networks: {
    development: {
      host: "127.0.0.1", // Localhost
      port: 8545,        // Port where Ganache is running
      network_id: "*",   // Match any network
    },
  },

  compilers: {
    solc: {
      version: "0.8.21", // Version of Solidity for compatibility
    },
  },
};
4. Write Migration Script:
Create a migration script in the migrations/ folder. Name it 2_deploy_contracts.js:

js
Copy code
const Student_management = artifacts.require("Student_management");

module.exports = function (deployer) {
  deployer.deploy(Student_management);
};
5. Start Ganache:
Launch Ganache and ensure it's running on port 8545. Ganache will provide a list of accounts you can use for interacting with the smart contract.

6. Deploy the Contract:
Run the following Truffle commands to compile and deploy your contract to Ganache:

bash
Copy code
truffle compile
truffle migrate --network development
This will deploy the contract to your local Ganache instance.

7. Interact with the Contract in the Truffle Console:
Now that the contract is deployed, you can interact with it in the Truffle console.

Start the console:

bash
Copy code
truffle console --network development
In the console, you can interact with the Student_management contract. Here are the steps:

a. Get Contract Instance:
js
Copy code
const studentManagement = await Student_management.deployed();
b. Add a Student:
You can add a student by calling the add_stud function:

js
Copy code
await studentManagement.add_stud(1, "Alice", "Computer Science", { from: web3.eth.accounts[0] });
This will add a student with ID 1, named Alice, in the Computer Science department.

c. Get Student Information:
You can get a student's information by calling the getStudent function. For example:

js
Copy code
const student = await studentManagement.getStudent(1);
console.log(student); // Output: ['Alice', 'Computer Science']
This will return the name and department of the student with ID 1.

d. Direct Ether Transfer:
You can send Ether directly to the contract by using the receive function. For example:

js
Copy code
await web3.eth.sendTransaction({ from: web3.eth.accounts[0], to: studentManagement.address, value: web3.utils.toWei("1", "ether") });
This will send 1 ETH to the contract. The contract will handle the transfer with the receive function.

e. Fallback Function:
If an invalid function is called, or if no matching function is found, the fallback function will be triggered, and a new student will be added. For example:

js
Copy code
await web3.eth.sendTransaction({ from: web3.eth.accounts[0], to: studentManagement.address, data: web3.utils.asciiToHex("invalidFunctionCall") });
This will trigger the fallback function, and a new student with ID 7, named XYZ, in the Mechanical department will be added to the Students array.

f. Check the Updated List of Students:
You can check the current list of students by accessing the Students array. For example, to get the student at index 0:

js
Copy code
const studentAtIndex0 = await studentManagement.Students(0);
console.log(studentAtIndex0);
g. Listen for Events:
If you want to listen for any event, such as new student additions or Ether transfers, you can use the web3 event system. However, as your contract doesn't emit custom events, this might be limited to the fallback and receive functions.